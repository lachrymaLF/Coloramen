let fs = require('fs');
let path = require('path');

const app_path = path.join(__dirname, '..', '..', '..');
const template_path = path.join(app_path, "template.ffx");
const out_path = (() => {
    const try_path = path.join(app_path, "coloramen.ffx");
    try {
        fs.unlinkSync(try_path, fs.constants.W_OK);
        return try_path;
    } catch (err) {
        const fallback = path.join(process.env.APPDATA, "Adobe", "CEP", "extensions", "com.lachrymalf.coloramen",  "coloramen.ffx");

        if (!fs.existsSync(path.dirname(fallback))) {
            const createDirRecursively = (dir) => {
                if (!fs.existsSync(dir)) {        
                    createDirRecursively(path.join(dir, ".."));
                    fs.mkdirSync(dir);
                }
            }
            createDirRecursively(path.dirname(fallback));
        }
        
        return fallback;
    }
})();

let try_readFileSync = (path) => {
    try {
        return fs.readFileSync(path);
    } catch (e) {
        alert(e);
        return null;
    }
}

const template = try_readFileSync(template_path).toString("hex");

const colors_offset = [0x0CD0, 0x2D1C];
const num_offset = [0x0ED3, 0x2F1F];

const pad_alpha = 'FF';
const key_width = 16; // number characters one definition of a key takes

exports.outPath = out_path;

exports.writeColors = function(colors, positions) {
    if (fs.existsSync(out_path))
        fs.unlinkSync(out_path);

    let output = Array.from(template);
    colors.forEach((e, i) => {
        let out_str = (positions[i] * 0xFFFF).toString(16).split('.')[0].padStart(8, '0') + pad_alpha + e;

        colors_offset.forEach((z) => {
            Array.from(out_str).forEach((f, j) => {
                output[z * 2 + j + i * key_width] = f;
            });
        });
    });

    let num_str = colors.length.toString(16).padStart(2, '0');
    Array.from(num_str).forEach((e, i) => {
        num_offset.forEach((z) => {
            output[z * 2 + i] = e;
        });
    });
    let buffer = Buffer.from(output.join(''), "hex");
    fs.appendFileSync(out_path, buffer);
}
